diff -crBN orange2.0/source/orange/lib_kernel.cpp orange2.0_PatchedOK/source/orange/lib_kernel.cpp
*** orange2.0/source/orange/lib_kernel.cpp	2010-02-24 21:25:35.896436000 +0000
--- orange2.0_PatchedOK/source/orange/lib_kernel.cpp	2010-05-27 11:28:46.142481142 +0100
***************
*** 3339,3345 ****
          bool err = false;
          
          if (mask) {
!           args = Py_BuildValue("OOiOO", X, Py_None, 1, Py_None, mask);
            maskedX = PyObject_CallObject(*maskedArray, args);
            Py_DECREF(args);
            if (!maskedX) {
--- 3339,3345 ----
          bool err = false;
          
          if (mask) {
!           args = Py_BuildValue("OOOi", X, mask, Py_None, 1);
            maskedX = PyObject_CallObject(*maskedArray, args);
            Py_DECREF(args);
            if (!maskedX) {
***************
*** 3352,3358 ****
          }
  
          if (!err && masky) {
!           args = Py_BuildValue("OOiOO", y, Py_None, 1, Py_None, masky);
            maskedy = PyObject_CallObject(*maskedArray, args);
            Py_DECREF(args);
            if (!maskedy) {
--- 3352,3358 ----
          }
  
          if (!err && masky) {
!           args = Py_BuildValue("OOOi", y, masky, Py_None, 1);
            maskedy = PyObject_CallObject(*maskedArray, args);
            Py_DECREF(args);
            if (!maskedy) {
diff -crBN orange2.0/source/orange/tabdelim.cpp orange2.0_PatchedOK/source/orange/tabdelim.cpp
*** orange2.0/source/orange/tabdelim.cpp	2010-02-24 21:25:35.896436000 +0000
--- orange2.0_PatchedOK/source/orange/tabdelim.cpp	2010-05-27 11:28:46.154481341 +0100
***************
*** 82,87 ****
--- 84,104 ----
    startDataLine = fei.line;
  }
  
+ //scPA
+ /** Converts the string to UPPER CASE.
+ *
+ *@param inString The string to be converted to upper case
+ *
+ *@return a new string equal to the inString but in upper case
+ */
+ 
+ string TTabDelimExampleGenerator::strToUpper(string inString)
+ {
+   std::transform(inString.begin(), inString.end(), inString.begin(), (int(*)(int))std::toupper);
+         return  inString;
+ }
+ //ecPA
+ 
  
  TTabDelimExampleGenerator::~TTabDelimExampleGenerator()
  {
***************
*** 126,135 ****
        string valstr;
  
        // Check for don't care
        valstr = *ai;
!       if (!valstr.length() || (valstr == "NA") || (valstr == ".") || (DC && (valstr == DC)))
          valstr = "?";
!       else if ((valstr == "*") || (DK && (valstr == DK)))
          valstr = "~";
  
        try {
--- 143,153 ----
        string valstr;
  
        // Check for don't care
+       //scPA    added MIS_VAL, nan, n/a  and ERROR       //ecPA
        valstr = *ai;
!       if (!valstr.length() || (strToUpper(valstr) == "NA") || (strToUpper(valstr) == "N/A") || (strToUpper(valstr) == "NAN") || (strToUpper(valstr) == "ERROR") || (valstr == ".") || (DC && (valstr == DC)))
          valstr = "?";
!       else if ((valstr == "*") || (strToUpper(valstr) == "MIS_VAL") || (DK && (valstr == DK)))
          valstr = "~";
  
        try {
***************
*** 298,304 ****
    // non-NULL when this cannot be tab file (reason given as result)
    // NULL if this seems a valid tab file
    char *isNotTab = mayBeTabFile(stem);
! 
    TDomainDepot::TAttributeDescriptions descriptions;
    
    if (autoDetect) {
--- 316,322 ----
    // non-NULL when this cannot be tab file (reason given as result)
    // NULL if this seems a valid tab file
    char *isNotTab = mayBeTabFile(stem);
!   int verbose = 0;
    TDomainDepot::TAttributeDescriptions descriptions;
    
    if (autoDetect) {
***************
*** 308,314 ****
    }
    else {
      if (isNotTab)
!       raiseWarning("'%s' is being loaded as .tab, but looks more like .txt file\n(%s)", stem.c_str(), isNotTab);
      readTabHeader(stem, descriptions);
    }
  
--- 326,338 ----
    }
    else {
      if (isNotTab)
!       if (string(isNotTab).find("defined as having only one value",0) != -1)
!       {
!           if (verbose > 0)
!               raiseWarning("(%s)", isNotTab);
!       }
!       else
!           raiseWarning("'%s' is being loaded as .tab, but looks more like .txt file\n(%s)", stem.c_str(), isNotTab);
      readTabHeader(stem, descriptions);
    }
  
***************
*** 342,350 ****
            break;

          default:
!           raiseWarning("cannot determine type for attribute '%s'; the attribute will be ignored", adi->name.c_str());
!           *ati = 0;
!           continue;
          }
      }

--- 364,375 ----
            break;

          default:
!           raiseWarning("cannot determine type for attribute '%s'", adi->name.c_str());
!           //scPA use the attribute even if it has all values unknown
!           adi->varType = TValue::INTVAR;
!           //*ati = 0;
!           //continue;
!           //ecPA
          }
      }

***************
*** 407,413 ****
      const char *ceni = vli->first.c_str();
      if (   !*ceni
          || !ceni[1] && ((*ceni=='?') || (*ceni=='.') || (*ceni=='~') || (*ceni=='*'))
!         || !strcmp(ceni, "NA") || (DC && !strcmp(ceni, DC)) || (DK && !strcmp(ceni, DK)))
        continue;
      
      if (status == 3)
--- 433,439 ----
      const char *ceni = vli->first.c_str();
      if (   !*ceni
          || !ceni[1] && ((*ceni=='?') || (*ceni=='.') || (*ceni=='~') || (*ceni=='*'))
!         || (strToUpper(vli->first) == "NA") || (strToUpper(vli->first) == "N/A") || (strToUpper(vli->first) == "ERROR") || (strToUpper(vli->first) == "MIS_VAL") || (strToUpper(vli->first) == "NAN") || (DC && (vli->first == DC)) || (DK && (vli->first == DK))) //scPA  added the symbols "error", "MIS_VAL" and "NAN"     //ecPA
        continue;
      
      if (status == 3)
***************
*** 509,515 ****
          const char *ceni = ai->c_str();
          if (   !*ceni
              || !ceni[1] && ((*ceni=='?') || (*ceni=='.') || (*ceni=='~') || (*ceni=='*'))
!             || (*ai == "NA") || (DC && (*ai == DC)) || (DK && (*ai == DK)))
             continue;

          map<string, int>::iterator vf = di->values.lower_bound(*ai);
--- 509,515 ----
          const char *ceni = ai->c_str();
          if (   !*ceni
              || !ceni[1] && ((*ceni=='?') || (*ceni=='.') || (*ceni=='~') || (*ceni=='*'))
!             || (strToUpper(*ai) == "NA") || (strToUpper(*ai) == "N/A") || (strToUpper(*ai) == "ERROR") || (strToUpper(*ai) == "MIS_VAL") || (strToUpper(*ai) == "NAN") || (DC && (*ai == DC)) || (DK && (*ai == DK)))  //scPA  added the symbols "error", "MIS_VAL" and "NAN"     //ecPA
             continue;

          map<string, int>::iterator vf = di->values.lower_bound(*ai);
***************
*** 849,855 ****
        raiseErrorWho("write", "string '%s' cannot be written to a file since it contains invalid characters", c);
    return c;
  }
! 
  void tabDelim_writeExamples(FILE *file, PExampleGenerator rg, char delim, const char *DK, const char *DC)
  { 
    const TDomain domain = rg->domain.getReference();
--- 875,881 ----
        raiseErrorWho("write", "string '%s' cannot be written to a file since it contains invalid characters", c);
    return c;
  }
! //scPA    fixed the Format String Bugs //ecPA
  void tabDelim_writeExamples(FILE *file, PExampleGenerator rg, char delim, const char *DK, const char *DC)
  { 
    const TDomain domain = rg->domain.getReference();
***************
*** 864,875 ****
      for(; vi!=ve; vi++, ri++) {
        PUTDELIM;
        if (DK && ((*ri).valueType == valueDK))
!         fprintf(file, DK);
        else if (DC && ((*ri).valueType == valueDC))
!         fprintf(file, DC);
        else {
          (*vi)->val2filestr(*ri, st, *ex);
!         fprintf(file, checkCtrl(st.c_str()));
        }
      }
  
--- 890,901 ----
      for(; vi!=ve; vi++, ri++) {
        PUTDELIM;
        if (DK && ((*ri).valueType == valueDK))
!         fprintf(file, "%s", DK);
        else if (DC && ((*ri).valueType == valueDC))
!         fprintf(file, "%s", DC);
        else {
          (*vi)->val2filestr(*ri, st, *ex);
!         fprintf(file, "%s", checkCtrl(st.c_str()));
        }
      }
  
***************
*** 879,887 ****
        if (!(*mi).optional) {
          PUTDELIM;
          if (DK && ((*ri).valueType == valueDK))
!           fprintf(file, DK);
          else if (DC && ((*ri).valueType == valueDC))
!           fprintf(file, DC);
          else {
            (*mi).variable->val2filestr((*ex)[(*mi).id], st, *ex);
            fprintf(file, "%s", checkCtrl(st.c_str()));
--- 905,913 ----
        if (!(*mi).optional) {
          PUTDELIM;
          if (DK && ((*ri).valueType == valueDK))
!           fprintf(file, "%s", DK);
          else if (DC && ((*ri).valueType == valueDC))
!           fprintf(file, "%s", DC);
          else {
            (*mi).variable->val2filestr((*ex)[(*mi).id], st, *ex);
            fprintf(file, "%s", checkCtrl(st.c_str()));
***************
*** 904,910 ****
                fprintf(file, " ");
  
              if (mval.floatV == 1.0)
!               fprintf(file, checkCtrl(var.get_name().c_str()));
              else {
                var.val2filestr(mval, st, *ex);
                fprintf(file, "%s=%s", checkCtrl(var.get_name().c_str()), checkCtrl(st.c_str()));
--- 930,936 ----
                fprintf(file, " ");

              if (mval.floatV == 1.0)
!               fprintf(file, "%s", checkCtrl(var.get_name().c_str()));
              else {
                var.val2filestr(mval, st, *ex);
                fprintf(file, "%s=%s", checkCtrl(var.get_name().c_str()), checkCtrl(st.c_str()));
***************
*** 939,945 ****
        fprintf(file, "d");
      else {
        enumv->val2str(val, sval); 
!       fprintf(file, checkCtrl(escSpaces(sval).c_str()));
        while(enumv->nextValue(val)) {
          enumv->val2str(val, sval);
          fprintf(file, " %s", checkCtrl(escSpaces(sval).c_str()));
--- 965,971 ----
        fprintf(file, "d");
      else {
        enumv->val2str(val, sval); 
!       fprintf(file, "%s", escSpaces(sval).c_str());
        while(enumv->nextValue(val)) {
          enumv->val2str(val, sval);
          fprintf(file, " %s", checkCtrl(escSpaces(sval).c_str()));
diff -crBN orange2.0/source/orange/tabdelim.hpp orange2.0_PatchedOK/source/orange/tabdelim.hpp
*** orange2.0/source/orange/tabdelim.hpp	2010-02-24 21:25:35.896436000 +0000
--- orange2.0_PatchedOK/source/orange/tabdelim.hpp	2010-05-27 11:28:46.162511132 +0100
***************
*** 89,94 ****
--- 89,104 ----
                              const int createNewOn, vector<int> &status, vector<pair<int, int> > &metaStatus,
                              const char *aDK = NULL, const char *aDC = NULL, bool noCodedDiscrete = false, bool noClass = false);
    ~TTabDelimExampleGenerator();
+   //scPA
+   /** Convert a string to upper case.
+   *
+   *@param inString The string to be converted to upper case
+   *
+   *@return a new string equal to the inString but in upper case
+   */
+   string strToUpper(string inString);
+   //ecPA
+ 
  
    virtual bool readExample (TFileExampleIteratorData &, TExample &);
  
*** orange2.0/source/makefile.defs	2010-12-14 09:27:09.305699779 +0000
--- orange2.0_PatchedOK/source/makefile.defs	2011-01-05 11:36:03.985729333 +0000
***************
*** 59,65 ****
  	$(COMPILER) $(COMPILEOPTIONS) -c $< -o $@
  
  
! export CPATH=ppp:px:../include:../orange:$(PYTHONINCLUDE):/usr/local/include:/usr/include:$(PYTHONSITEPKGS)/numpy/core/include
  
  makefile.deps:
  	python ../pyxtract/makedep.py -n $(MODULENAME)
--- 59,66 ----
  	$(COMPILER) $(COMPILEOPTIONS) -c $< -o $@
  
  
! #export CPATH=ppp:px:../include:../orange:$(PYTHONINCLUDE):/usr/local/include:/usr/include:$(PYTHONSITEPKGS)/numpy/core/include
! export CPATH=ppp:px:../include:../orange:$(PYTHONINCLUDE):/usr/local/include:/usr/include:$(NUMPY_INCLUDE)
  
  makefile.deps:
  	python ../pyxtract/makedep.py -n $(MODULENAME)
