#!/bin/bash

if [ $# -ge 1 ]; then
    if [ ! "$1" = "-clear" ]; then
        echo "The only argument accepted is    -clear    which cleard the log dir aftr running the tests"
        exit 1
    fi
fi


#Configurable parameters
OUTPUTDIR=`date +/tmp/testsLOG_%s`
mkdir $OUTPUTDIR
OUTPUT_LOG=$OUTPUTDIR/test.log
OUTPUT_PIPE=$OUTPUTDIR/output.pipe
  # NTESTS = Number of tests to perform.  Please, update this value if tests are added or deleted
NTESTS=9

# When adding a new test, insert after the last test and before "PrintReport" statement:

#     python TEST_python_Script.py &>$OUTPUT_PIPE
#     cat $OUTPUT_PIPE >> $OUTPUT_LOG
#     CheckErrors "Test Name with max 20 chars"

#        - Change TEST_python_Script.py to your python script file and "Test Name with max 20 chars" to 
#          some name for the test to be shown in the report
#
#  This Script assumes that a test was successful if in it's output was NOT found the string "FAILED" AND 
#       was found the string "OK"
#  If the script does not find either "FAILED" nor "OK", it assumes tht teh test has failed and in comments 
#       will report "Could't find status" 
#==============================================================================================================
TESTS_DONE=0
FAILS=0
TestDate=`date`
FAIL_FOUND=0

CheckErrors() 
{
  echo -ne  $1 | awk '{printf "\033[34m%-25.25s",$0}'
  FAIL_FOUND=1
  SKIP_FOUND=0
  FAIL_STR=`awk '/FAILED/ { pat = $0 }END{print pat}' $OUTPUT_PIPE`
  OK_STR=`awk '/OK/ { pat = $0 }END{print pat}' $OUTPUT_PIPE`
  SKIP_STR=`awk '/SKIP/ { pat = $0 }END{print pat}' $OUTPUT_PIPE`
  if [ ! -z "$FAIL_STR" ];then
      FAIL_FOUND=1
  elif [ ! -z "$SKIP_STR" ];then
      FAIL_FOUND=0
      SKIP_FOUND=1
  elif [ ! -z "$OK_STR" ];then
      FAIL_FOUND=0
  else
      FAIL_FOUND=1
      FAIL_STR="Could't find status"
  fi
  if [ $FAIL_FOUND = 0 ]; then
     if [ $SKIP_FOUND = 1 ]; then
         echo -ne $SKIP_STR | awk '{printf "\033[34m%-40.40s",$0}'
         echo -ne "SKIPPED" | awk '{printf "\033[33m%-15.15s\n",$0}'
     else
         echo -ne $OK_STR | awk '{printf "\033[34m%-40.40s",$0}'
         echo -ne "PASSED" | awk '{printf "\033[32m%-15.15s\n",$0}'
     fi
  else
     echo -ne $FAIL_STR | awk '{printf "\033[34m%-40.40s",$0}'
     echo -ne "FAILED" | awk '{printf "\033[31m%-15.15s\n",$0}'
     FAILS=$(($FAILS+1))

  fi
  #Increment the percentage

  echo -ne " "$((($TESTS_DONE*100)/$NTESTS))  "%" | awk '{printf "\033[m%-5.5s",$0}'
  echo -ne "\\r"
  TESTS_DONE=$(($TESTS_DONE+1))
}

PrintReport()
{
  rm $OUTPUT_PIPE 
  echo "================================ Report ================================="
  if [ $FAILS = 0 ]; then
        echo "All the $NTESTS tests specified in the script were successful!"
        echo "No fails found!"
  else
        echo "!! FAILS found !!"
        echo "From the $NTESTS tests pecified in the script, $FAILS had fail!"
        echo "Please check the file $OUTPUT_LOG for detailed information."
  fi
  echo -e "\\n\\n"
}

echo "Test run at $TestDate" > $OUTPUT_LOG
clear
echo "============================ Running $NTESTS Tests ============================"
echo "   Test Name                  Comments                        Test Result    "
echo "--------------------------------------------------------------------------"       
python AZdataUtilitiesTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZdataUtilitiesTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "dataUtilitiesTest"

python AZevalUtilitiesTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZevalUtilitiesTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "evalUtilitiesTest"

python AZorngCinfonyTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZevalUtilitiesTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "CinfonyTest"


python AZorngCvSVMTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngCvSVMTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "CvSVMTest"

python AZorngCvANNTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngCvANNTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "CvANNTest"


python AZorngPLSTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngPLSTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "PLSTest"

python AZorngRFTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngRFTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "RFTest"

python AZorngConsensus.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngConsensus +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "ConsensusTest"

python AZorngParamOptTest.py &>$OUTPUT_PIPE
echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngParamOptTest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
cat $OUTPUT_PIPE >> $OUTPUT_LOG
CheckErrors "AZorngParamOptTest"

#python AZorngAppsPackMPITest.py &>$OUTPUT_PIPE
#echo "-+-+-+-+-+-+-+-+-+-+-+ AZorngAppsPackMPITest +-+-+-+-+-+-+-+-+-+-+-" >> $OUTPUT_LOG
#cat $OUTPUT_PIPE >> $OUTPUT_LOG
#CheckErrors "AppsPackMPITest"

PrintReport

echo "LOGFILE:$OUTPUT_LOG"

if [ $# -ge 1 ]; then
    if [ "$1" = "-clear" ]; then
        echo "removing $OUTPUTDIR"
        rm -rf $OUTPUTDIR
    fi
fi


if [ $FAILS = 0 ]; then
    exit 0
else
    exit 1
fi


